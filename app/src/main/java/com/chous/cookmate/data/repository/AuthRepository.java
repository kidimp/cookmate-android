package com.chous.cookmate.data.repository;

import android.content.Context;
import android.content.SharedPreferences;

import com.chous.cookmate.data.db.AppDatabase;
import com.chous.cookmate.data.db.dao.AuthDao;
import com.chous.cookmate.data.db.entity.UserEntity;
import com.chous.cookmate.data.remote.dto.LoginResponse;
import com.chous.cookmate.domain.model.LoginResult;
import com.chous.cookmate.data.remote.ApiClient;
import com.chous.cookmate.data.remote.AuthApiService;
import com.chous.cookmate.utils.NetworkUtils;

import retrofit2.Response;

/**
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: —Ä–µ—à–∞–µ—Ç –≥–¥–µ –∏ –∫–∞–∫ –≤–∑—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî
 * –∏–∑ —Å–µ—Ç–∏, –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, –∫—ç—à–∞ –∏ —Ç. –¥.<br>
 * ViewModel –Ω–µ –∑–Ω–∞–µ—Ç, –æ–Ω–ª–∞–π–Ω –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
 */
public class AuthRepository {

    private final Context context;
    private final AuthApiService apiService;
    private final AuthDao authDao;

    public AuthRepository(Context context) {
        this.context = context;
        apiService = ApiClient.getAuthApiService();
        authDao = AppDatabase.getInstance(context).authDao();
    }

    public interface LoginCallback {
        void onResult(LoginResult result);
    }

    public void login(String email, String password, LoginCallback callback) {
        if (NetworkUtils.isNetworkAvailable(context)) {
            // üåê –û–Ω–ª–∞–π–Ω –ª–æ–≥–∏–Ω
            new Thread(() -> {
                try {
                    Response<LoginResponse> response = apiService.login(email, password).execute();
                    if (response.isSuccessful() && response.body() != null) {
                        String token = response.body().getToken();
                        saveToken(token);
                        authDao.insertUser(new UserEntity(email, token));
                        callback.onResult(new LoginResult(true, null));
                    } else {
                        callback.onResult(new LoginResult(false, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"));
                    }
                } catch (Exception e) {
                    callback.onResult(new LoginResult(false, e.getMessage()));
                }
            }).start();
        } else {
            // üì¥ –û—Ñ—Ñ–ª–∞–π–Ω –ª–æ–≥–∏–Ω
            new Thread(() -> {
                UserEntity user = authDao.getUserByEmail(email);
                if (user != null) {
                    callback.onResult(new LoginResult(true, null));
                } else {
                    callback.onResult(new LoginResult(false, "–ù–µ—Ç —Å–µ—Ç–∏ –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"));
                }
            }).start();
        }
    }

    private void saveToken(String token) {
        SharedPreferences prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE);
        prefs.edit().putString("auth_token", token).apply();
    }
}
